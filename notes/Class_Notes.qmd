---
title: "Journal"
---

# Journal:


```{r}
# Date: "9/16"
# - The next step in the class will be multivariate models, where we add a third variable into our equations. 

# In class: Multivariate Viz
```


```{r}
# Date "9/19"

library(tidyverse)

fave_places <- read.csv("https://ajohns24.github.io/data/112/our_fave_places.csv")

# Check it out
head(fave_places)
```


```{r}
# Date "9/23/2024"

# Effective Viz

library(tidyverse)

 #ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + 
  #geom_point()

# labs creates titles
```

```{r}
# Date: "09/27/2024

# Why do we need visualizations? It allows for a quick, easy way to acquaint oneself with a dataset. 
# Assume you are given a clean dataset, what are the first steps? Using the head() function, you should check and see what the variables are, you should also use the dim() function to see how many points you are using, you should also learn what the units of observation are. Use the str() function. 
# The max number of categorical variables you can visualize in one plot is three, maybe four. The maximum number of numerical variables you could fit into one graph is seven. 
# We can make a plot more effective by adding labels, legends, titles, subtitles, captions, alt_text, color, correct plots.
# The x axis is made up of latitude and the y axis is made up of longitude. 
```

```{r}
# DATE "10/02/24"
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")
```

```{r}
elections |>
  group_by(historical) |>
  summarise(n()) 
```

```{r}
# Get a background map
library(socviz)
data(county_map)

# Make a choropleth map
library(RColorBrewer)  # For the color scale
library(ggthemes) # For theme_map
elections |> 
  mutate(county_fips = as.character(county_fips)) |> 
  mutate(county_fips = 
           ifelse(nchar(county_fips) == 4, paste0("0", county_fips), county_fips)) |> 
  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +
    geom_map(map = county_map) +
    scale_fill_manual(values = rev(brewer.pal(10, "RdBu")), name = "% Republican") +
    expand_limits(x = county_map$long, y = county_map$lat)  + 
    theme_map() +
    theme(legend.position = "right") + 
    coord_equal()
```


```{r}
#How many total people voted for the Democratic and Republican candidates in 2020?
#What about in each state?
#In just the state of Minnesota:
#Which counties had the highest and lowest Democratic vote in 2020?
#How did the Democratic vote in each county change from 2016 to 2020?
  
```

```{r}
# is.na() shows the coloumns with missing values, helping you to better acquiant yourself with your data set. rowSums() determines how many rows have missing values, coloumnSum() determines how many have no data entered. 
```

```{r}
# DATE: "10/07/2024"

library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')

# Using count()

# Using count()
penguins |> 
  count(species, sex)
# Using group_by() and summarize()
penguins |>  
  group_by(species) |> 
  count(sex)

penguin_avg <- penguins |> 
  group_by(species, sex) |> 
  summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |> 
  na.omit()

head(penguins)
head(penguin_avg)

# The reshaping process does not lose any data from the original dataset...
```
```{r}
# DATE "10/11/2024"
# Semi-join, uses the columns you select, if two have same name, you will get error message. left_join takes the comments from the right table and adds them to the left. inner_join only takes rows with overlap, full join will join everything, semi_join is like a filter, but filters in the rows with the same keys, anti_join is a version of the select, taking only the portions of the left table that won't merge with the right table. Anti join removes what the two tables both share.  
```

```{r}
# DATE "10/13/2024"

library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv") |> 
  select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |> 
  mutate(dem_support_20 = case_when(
    (repub_pct_20 - dem_pct_20 >= 5) ~ "low",
    (repub_pct_20 - dem_pct_20 <= -5) ~ "high",
    .default = "medium"
  ))

# Check it out
head(elections)  

ggplot(elections, aes(x = dem_support_20)) + 
  geom_bar()

elections |> 
  count(dem_support_20)

str(elections)

# Notice that the order of the levels is not alphabetical!
elections <- elections |> 
  mutate(dem_support_20 = fct_relevel(dem_support_20, c("low", "medium", "high")))

# Notice the new structure of the dem_support_20 variable
str(elections)

# And plot dem_support_20
ggplot(elections, aes(x = dem_support_20)) +
  geom_bar()
```

