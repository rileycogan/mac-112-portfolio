{
  "hash": "9eccb4de5c35587f024286479dd9b9c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Journal\"\n---\n\n\n\n\n\n# Journal:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Date: \"9/16\"\n# - The next step in the class will be multivariate models, where we add a third variable into our equations. \n\n# In class: Multivariate Viz\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Date \"9/19\"\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nfave_places <- read.csv(\"https://ajohns24.github.io/data/112/our_fave_places.csv\")\n\n# Check it out\nhead(fave_places)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  latitude longitude\n1       46      -123\n2       33        52\n3       48       -90\n4       36      -112\n5       59        25\n6       39      -106\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Date \"9/23/2024\"\n\n# Effective Viz\n\nlibrary(tidyverse)\n\n #ggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  #geom_point()\n\n# labs creates titles\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Date: \"09/27/2024\n\n# Why do we need visualizations? It allows for a quick, easy way to acquaint oneself with a dataset. \n# Assume you are given a clean dataset, what are the first steps? Using the head() function, you should check and see what the variables are, you should also use the dim() function to see how many points you are using, you should also learn what the units of observation are. Use the str() function. \n# The max number of categorical variables you can visualize in one plot is three, maybe four. The maximum number of numerical variables you could fit into one graph is seven. \n# We can make a plot more effective by adding labels, legends, titles, subtitles, captions, alt_text, color, correct plots.\n# The x axis is made up of latitude and the y axis is made up of longitude. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DATE \"10/02/24\"\n# Load tidyverse & data\nlibrary(tidyverse)\nelections <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nelections |>\n  group_by(historical) |>\n  summarise(n()) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  historical `n()`\n  <chr>      <int>\n1 blue         494\n2 purple      1098\n3 red         1517\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get a background map\nlibrary(socviz)\ndata(county_map)\n\n# Make a choropleth map\nlibrary(RColorBrewer)  # For the color scale\nlibrary(ggthemes) # For theme_map\nelections |> \n  mutate(county_fips = as.character(county_fips)) |> \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips)) |> \n  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +\n    geom_map(map = county_map) +\n    scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n    expand_limits(x = county_map$long, y = county_map$lat)  + \n    theme_map() +\n    theme(legend.position = \"right\") + \n    coord_equal()\n```\n\n::: {.cell-output-display}\n![](Class_Notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#How many total people voted for the Democratic and Republican candidates in 2020?\n#What about in each state?\n#In just the state of Minnesota:\n#Which counties had the highest and lowest Democratic vote in 2020?\n#How did the Democratic vote in each county change from 2016 to 2020?\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# is.na() shows the coloumns with missing values, helping you to better acquiant yourself with your data set. rowSums() determines how many rows have missing values, coloumnSum() determines how many have no data entered. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DATE: \"10/07/2024\"\n\nlibrary(tidyverse)\npenguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using count()\n\n# Using count()\npenguins |> \n  count(species, sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  species   sex        n\n  <chr>     <chr>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using group_by() and summarize()\npenguins |>  \n  group_by(species) |> \n  count(sex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex        n\n  <chr>     <chr>  <int>\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    <NA>       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    <NA>       5\n```\n\n\n:::\n\n```{.r .cell-code}\npenguin_avg <- penguins |> \n  group_by(species, sex) |> \n  summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |> \n  na.omit()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <chr>   <chr>              <dbl>         <dbl>             <dbl>       <dbl>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <chr>, year <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(penguin_avg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  <chr>     <chr>          <dbl>\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n```\n\n\n:::\n\n```{.r .cell-code}\n# The reshaping process does not lose any data from the original dataset...\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DATE \"10/11/2024\"\n# Semi-join, uses the columns you select, if two have same name, you will get error message. left_join takes the comments from the right table and adds them to the left. inner_join only takes rows with overlap, full join will join everything, semi_join is like a filter, but filters in the rows with the same keys, anti_join is a version of the select, taking only the portions of the left table that won't merge with the right table. Anti join removes what the two tables both share.  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# DATE \"10/13/2024\"\n\nlibrary(tidyverse)\nelections <- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\") |> \n  select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |> \n  mutate(dem_support_20 = case_when(\n    (repub_pct_20 - dem_pct_20 >= 5) ~ \"low\",\n    (repub_pct_20 - dem_pct_20 <= -5) ~ \"high\",\n    .default = \"medium\"\n  ))\n\n# Check it out\nhead(elections)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  state_abbr historical    county_name total_votes_20 repub_pct_20 dem_pct_20\n1         AL        red Autauga County          27770        71.44      27.02\n2         AL        red Baldwin County         109679        76.17      22.41\n3         AL        red Barbour County          10518        53.45      45.79\n4         AL        red    Bibb County           9595        78.43      20.70\n5         AL        red  Blount County          27588        89.57       9.57\n6         AL        red Bullock County           4613        24.84      74.70\n  dem_support_20\n1            low\n2            low\n3            low\n4            low\n5            low\n6           high\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(elections, aes(x = dem_support_20)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Class_Notes_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nelections |> \n  count(dem_support_20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  dem_support_20    n\n1           high  458\n2            low 2494\n3         medium  157\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(elections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: chr  \"low\" \"low\" \"low\" \"low\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# Notice that the order of the levels is not alphabetical!\nelections <- elections |> \n  mutate(dem_support_20 = fct_relevel(dem_support_20, c(\"low\", \"medium\", \"high\")))\n\n# Notice the new structure of the dem_support_20 variable\nstr(elections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: Factor w/ 3 levels \"low\",\"medium\",..: 1 1 1 1 1 3 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n# And plot dem_support_20\nggplot(elections, aes(x = dem_support_20)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Class_Notes_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}