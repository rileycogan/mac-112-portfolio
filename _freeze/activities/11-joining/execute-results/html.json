{
  "hash": "11da5d36a330ced2536250c5ed3c4a57",
  "result": {
    "engine": "knitr",
    "markdown": "::: {.cell}\n\n```{.r .cell-code}\n# Date \"10/11/2024\"\n# Activity 11\n# Author \"Riley Cogan\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_1 <- data.frame(\n  student = c(\"A\", \"B\", \"C\"),\n  class = c(\"STAT 101\", \"GEOL 101\", \"ANTH 101\")\n)\n\n# Check it out\nstudents_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class\n1       A STAT 101\n2       B GEOL 101\n3       C ANTH 101\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments_1 <- data.frame(\n  class = c(\"STAT 101\", \"ART 101\", \"GEOL 101\"),\n  enrollment = c(18, 17, 24)\n)\n\n# Check it out\nenrollments_1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class enrollment\n1 STAT 101         18\n2  ART 101         17\n3 GEOL 101         24\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left_join practice\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nstudents_1 |> \n  left_join(enrollments_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n3       C ANTH 101         NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# This merged the two datasets, highlighting different students, what classes they are in, and the total enrollment for that respective class. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Inner Join practice\n\nstudents_1 |> \n  inner_join(enrollments_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments_1 |> \n  inner_join(students_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class enrollment student\n1 STAT 101         18       A\n2 GEOL 101         24       B\n```\n\n\n:::\n\n```{.r .cell-code}\n# Inner Join combines the two data sets by combing the two classes that have overlap between the two data sets. When the function is inversed, the output differs by order, with the second format making the most sense having class first. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_1 |> \n  full_join(enrollments_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n3       C ANTH 101         NA\n4    <NA>  ART 101         17\n```\n\n\n:::\n\n```{.r .cell-code}\nenrollments_1 |> \n  full_join(students_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class enrollment student\n1 STAT 101         18       A\n2  ART 101         17    <NA>\n3 GEOL 101         24       B\n4 ANTH 101         NA       C\n```\n\n\n:::\n\n```{.r .cell-code}\n# This combines all elements of two datasets, highlighting the differences between the two data sets. When run on the inverse, the selected row is the class, rather than by student. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# KEY: left_join()\n# Keeps all observations from the left, but discards any observations in the right that do not have a match in the left.1\n\n# inner_join()\n# Keeps only the observations from the left with a match in the right.\n\n# full_join()\n# Keeps all observations from the left and the right. (This is less common than left_join() and inner_join()).\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_1 |> \n  semi_join(enrollments_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class\n1       A STAT 101\n2       B GEOL 101\n```\n\n\n:::\n\n```{.r .cell-code}\nenrollments_1 |> \n  semi_join(students_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class enrollment\n1 STAT 101         18\n2 GEOL 101         24\n```\n\n\n:::\n\n```{.r .cell-code}\n# Semi Join selects only the parts of the data set that are transferable, meaning that onlt the parts that match stay, while the parts that don't match are left alone. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_1 |> \n  anti_join(enrollments_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class\n1       C ANTH 101\n```\n\n\n:::\n\n```{.r .cell-code}\nenrollments_1 |> \n  anti_join(students_1)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    class enrollment\n1 ART 101         17\n```\n\n\n:::\n\n```{.r .cell-code}\n# this takes only parts that don't match?\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# KEY: semi_join()\n# Discards any observations in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case.\n\n# anti_join()\n# Discards any observations in the left table that do have a match in the right table.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_2 <- data.frame(\n  student = c(\"D\", \"E\", \"F\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\")\n)\n\n# Check it out\nstudents_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class\n1       D COMP 101\n2       E BIOL 101\n3       F POLI 101\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nenrollments_2 <- data.frame(\n  course = c(\"ART 101\", \"BIOL 101\", \"COMP 101\"),\n  enrollment = c(18, 20, 19)\n)\n\n# Check it out\nenrollments_2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    course enrollment\n1  ART 101         18\n2 BIOL 101         20\n3 COMP 101         19\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# POTENTIAL ERRORS AND POSSIBLE SOLUTIONS, VERY IMPORTANT!!!!\n\n\n# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.\n# students_2 |> \n  # left_join(enrollments_2)\n\n# This is because the names of the columns do NOT match (class vs course), thus we have to run the following code:\nstudents_2 |> \n  left_join(enrollments_2, by = c(\"class\" = \"course\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class enrollment\n1       D COMP 101         19\n2       E BIOL 101         20\n3       F POLI 101         NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# The order of the keys is important:\n# by = c(\"left data key\" = \"right data key\")\n# The order is mixed up here, thus we get an error:\n# students_2 |> \n  # left_join(enrollments_2, by = c(\"course\" = \"class\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add student grades in each course\nstudents_3 <- data.frame(\n  student = c(\"Y\", \"Y\", \"Z\", \"Z\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\", \"COMP 101\"),\n  grade = c(\"B\", \"S\", \"C\", \"A\")\n)\n\n# Check it out\nstudents_3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade\n1       Y COMP 101     B\n2       Y BIOL 101     S\n3       Z POLI 101     C\n4       Z COMP 101     A\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add average grades in each course\nenrollments_3 <- data.frame(\n  class = c(\"ART 101\", \"BIOL 101\",\"COMP 101\"),\n  grade = c(\"B\", \"A\", \"A-\"),\n  enrollment = c(20, 18, 19)\n)\n\n# Check it out\nenrollments_3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     class grade enrollment\n1  ART 101     B         20\n2 BIOL 101     A         18\n3 COMP 101    A-         19\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents_3 |> \n  left_join(enrollments_3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(class, grade)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade enrollment\n1       Y COMP 101     B         NA\n2       Y BIOL 101     S         NA\n3       Z POLI 101     C         NA\n4       Z COMP 101     A         NA\n```\n\n\n:::\n\n```{.r .cell-code}\n# This is problematic because it is trying to match an individual's grade to a class average grade... \n# The solution is as follows:\n\nstudents_3 |> \n  left_join(enrollments_3, by = c(\"class\" = \"class\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  student    class grade.x grade.y enrollment\n1       Y COMP 101       B      A-         19\n2       Y BIOL 101       S       A         18\n3       Z POLI 101       C    <NA>         NA\n4       Z COMP 101       A      A-         19\n```\n\n\n:::\n\n```{.r .cell-code}\n# grade.x is the individual's grade, whereas grade.y is the class average. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Beginning of Exercise 2\n\n# People who have voted\nvoters <- data.frame(\n  id = c(\"A\", \"D\", \"E\", \"F\", \"G\"),\n  times_voted = c(2, 4, 17, 6, 20)\n)\n\nvoters\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted\n1  A           2\n2  D           4\n3  E          17\n4  F           6\n5  G          20\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Contact info for voting age adults\ncontact <- data.frame(\n  name = c(\"A\", \"B\", \"C\", \"D\"),\n  address = c(\"summit\", \"grand\", \"snelling\", \"fairview\"),\n  age = c(24, 89, 43, 38)\n)\n\ncontact\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    A   summit  24\n2    B    grand  89\n3    C snelling  43\n4    D fairview  38\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. We want contact info for people who HAVEN'T voted\ncontact |> \n  left_join(voters, by = c(\"name\" = \"id\")) ## My attempt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age times_voted\n1    A   summit  24           2\n2    B    grand  89          NA\n3    C snelling  43          NA\n4    D fairview  38           4\n```\n\n\n:::\n\n```{.r .cell-code}\ncontact |> \n  anti_join(voters, by = c(\"name\" = \"id\")) ## Answer key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    B    grand  89\n2    C snelling  43\n```\n\n\n:::\n\n```{.r .cell-code}\n# 2. We want contact info for people who HAVE voted\nvoters |> \n  left_join(contact, by = c(\"id\" = \"name\")) ## My attempt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     <NA>  NA\n4  F           6     <NA>  NA\n5  G          20     <NA>  NA\n```\n\n\n:::\n\n```{.r .cell-code}\ncontact |> \n  semi_join(voters, by = c(\"name\" = \"id\")) ## Answer key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age\n1    A   summit  24\n2    D fairview  38\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. We want any data available on each person\nvoters |> \n  full_join(contact, by = c(\"id\" = \"name\")) ## My attempt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     <NA>  NA\n4  F           6     <NA>  NA\n5  G          20     <NA>  NA\n6  B          NA    grand  89\n7  C          NA snelling  43\n```\n\n\n:::\n\n```{.r .cell-code}\ncontact |> \n  full_join(voters, by = c(\"name\" = \"id\")) ## Answer Key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  name  address age times_voted\n1    A   summit  24           2\n2    B    grand  89          NA\n3    C snelling  43          NA\n4    D fairview  38           4\n5    E     <NA>  NA          17\n6    F     <NA>  NA           6\n7    G     <NA>  NA          20\n```\n\n\n:::\n\n```{.r .cell-code}\nvoters |> \n  full_join(contact, by = c(\"id\" = \"name\")) ## Answer key part 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     <NA>  NA\n4  F           6     <NA>  NA\n5  G          20     <NA>  NA\n6  B          NA    grand  89\n7  C          NA snelling  43\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. When possible, we want to add contact info to the voting roster\nvoters |> \n  left_join(contact, by = c(\"id\" = \"name\")) ## Answer key\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     <NA>  NA\n4  F           6     <NA>  NA\n5  G          20     <NA>  NA\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}